{"id":"../node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-vertex.glsl.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-vertex.glsl.js.map","includedInParent":true,"mtime":1550794262000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1550874675876}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar _default = \"#define SHADER_NAME scatterplot-layer-vertex-shader\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute float instanceRadius;\\nattribute float instanceLineWidths;\\nattribute vec4 instanceFillColors;\\nattribute vec4 instanceLineColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform float radiusScale;\\nuniform float radiusMinPixels;\\nuniform float radiusMaxPixels;\\nuniform float lineWidthScale;\\nuniform float lineWidthMinPixels;\\nuniform float lineWidthMaxPixels;\\nuniform float stroked;\\nuniform bool filled;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\n\\nvoid main(void) {\\n  // Multiply out radius and clamp to limits\\n  float outerRadiusPixels = clamp(\\n    project_scale(radiusScale * instanceRadius),\\n    radiusMinPixels, radiusMaxPixels\\n  );\\n  \\n  // Multiply out line width and clamp to limits\\n  float lineWidth = clamp(\\n    project_scale(lineWidthScale * instanceLineWidths), \\n    lineWidthMinPixels, lineWidthMaxPixels\\n  );\\n\\n  // outer radius needs to offset by half stroke width\\n  outerRadiusPixels += stroked * lineWidth / 2.0;\\n\\n  // position on the containing square in [-1, 1] space\\n  unitPosition = positions.xy;\\n\\n  innerUnitRadius = 1.0 - stroked * lineWidth / outerRadiusPixels;\\n  \\n  vec3 offset = positions * outerRadiusPixels;\\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, offset);\\n\\n  // Apply opacity to instance color, or return instance picking color\\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity) / 255.;\\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity) / 255.;\\n  \\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\\n  picking_setPickingColor(instancePickingColors);\\n}\\n\";\nexports.default = _default;","map":{"mappings":[{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":3,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":7,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":10,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":13,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":17,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":18,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":19,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js","name":null,"original":{"line":21,"column":0},"generated":{"line":26,"column":15}}],"sources":{"../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.js":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\n\nvoid main(void) {\n  // Multiply out radius and clamp to limits\n  float outerRadiusPixels = clamp(\n    project_scale(radiusScale * instanceRadius),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidth = clamp(\n    project_scale(lineWidthScale * instanceLineWidths), \n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidth / 2.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n\n  innerUnitRadius = 1.0 - stroked * lineWidth / outerRadiusPixels;\n  \n  vec3 offset = positions * outerRadiusPixels;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, offset);\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity) / 255.;\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity) / 255.;\n  \n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n`;\n"},"lineCount":null}},"hash":"90bb3143b32e2c4ef8365058bad50929","cacheData":{"env":{}}}
{"id":"../node_modules/@deck.gl/layers/dist/esm/icon-layer/icon-layer-vertex.glsl.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/dist/esm/icon-layer/icon-layer-vertex.glsl.js.map","includedInParent":true,"mtime":1550794261000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1550874675876}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar _default = \"#define SHADER_NAME icon-layer-vertex-shader\\n\\nattribute vec2 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute float instanceSizes;\\nattribute float instanceAngles;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\nattribute vec4 instanceIconFrames;\\nattribute float instanceColorModes;\\nattribute vec2 instanceOffsets;\\n\\nuniform float sizeScale;\\nuniform vec2 iconsTextureDim;\\n\\nvarying float vColorMode;\\nvarying vec4 vColor;\\nvarying vec2 vTextureCoords;\\n\\nvec2 rotate_by_angle(vec2 vertex, float angle) {\\n  float angle_radian = angle * PI / 180.0;\\n  float cos_angle = cos(angle_radian);\\n  float sin_angle = sin(angle_radian);\\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\\n  return rotationMatrix * vertex;\\n}\\n\\nvoid main(void) {\\n  vec2 iconSize = instanceIconFrames.zw;\\n  // scale icon height to match instanceSize\\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : instanceSizes / iconSize.y;\\n\\n  // scale and rotate vertex in \\\"pixel\\\" value and convert back to fraction in clipspace\\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * sizeScale * instanceScale;\\n  pixelOffset.y *= -1.0;\\n\\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, vec3(0.0));\\n  gl_Position += project_pixel_to_clipspace(pixelOffset);\\n\\n  vTextureCoords = mix(\\n    instanceIconFrames.xy,\\n    instanceIconFrames.xy + iconSize,\\n    (positions.xy + 1.0) / 2.0\\n  ) / iconsTextureDim;\\n\\n  vTextureCoords.y = 1.0 - vTextureCoords.y;\\n\\n  vColor = instanceColors / 255.;\\n\\n  vColorMode = instanceColorModes;\\n\\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\\n  picking_setPickingColor(instancePickingColors);\\n}\\n\";\nexports.default = _default;","map":{"mappings":[{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":3,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":7,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":10,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":13,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":17,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":18,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":19,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../src/icon-layer/icon-layer-vertex.glsl.js","name":null,"original":{"line":21,"column":0},"generated":{"line":26,"column":15}}],"sources":{"../../../src/icon-layer/icon-layer-vertex.glsl.js":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  vec2 iconSize = instanceIconFrames.zw;\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : instanceSizes / iconSize.y;\n\n  // scale and rotate vertex in \"pixel\" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * sizeScale * instanceScale;\n  pixelOffset.y *= -1.0;\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, vec3(0.0));\n  gl_Position += project_pixel_to_clipspace(pixelOffset);\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vTextureCoords.y = 1.0 - vTextureCoords.y;\n\n  vColor = instanceColors / 255.;\n\n  vColorMode = instanceColorModes;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n`;\n"},"lineCount":null}},"hash":"3a0deb89aa4badbb69786d7a1812da3a","cacheData":{"env":{}}}
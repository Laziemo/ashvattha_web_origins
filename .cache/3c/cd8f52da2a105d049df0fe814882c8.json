{"id":"../node_modules/@deck.gl/layers/dist/esm/grid-cell-layer/grid-cell-layer-vertex.glsl.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/dist/esm/grid-cell-layer/grid-cell-layer-vertex.glsl.js.map","includedInParent":true,"mtime":1550794260000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1550874675876}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Inspired by screen-grid-layer vertex shader in deck.gl\nvar _default = \"#define SHADER_NAME grid-cell-layer-vertex-shader\\n\\nattribute vec3 positions;\\nattribute vec3 normals;\\n\\nattribute vec3 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute float instanceElevations;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\n// Custom uniforms\\nuniform float extruded;\\nuniform float cellSize;\\nuniform float coverage;\\nuniform float opacity;\\nuniform float elevationScale;\\n\\n// A magic number to scale elevation so that 1 unit approximate to 1 meter\\n#define ELEVATION_SCALE 0.8\\n\\n// Result\\nvarying vec4 vColor;\\n\\nvoid main(void) {\\n\\n  // if ahpha == 0.0 or z < 0.0, do not render element\\n  float noRender = float(instanceColors.a == 0.0 || instanceElevations < 0.0);\\n  float finalCellSize = project_scale(cellSize) * mix(1.0, 0.0, noRender);\\n\\n  float elevation = 0.0;\\n\\n  if (extruded > 0.5) {\\n    elevation = instanceElevations  * (positions.z + 1.0) *\\n      ELEVATION_SCALE * elevationScale;\\n  }\\n\\n  // cube geometry vertics are between -1 to 1, scale and transform it to between 0, 1\\n  vec3 extrudedPosition = vec3(instancePositions.xy, elevation);\\n  vec2 extrudedPosition64xyLow = instancePositions64xyLow;\\n  vec3 offset = vec3(\\n    (positions.x * coverage + 1.0) / 2.0 * finalCellSize,\\n    (positions.y * coverage - 1.0) / 2.0 * finalCellSize,\\n    1.0);\\n\\n  // extrude positions\\n  vec4 position_worldspace;\\n  gl_Position = project_position_to_clipspace(extrudedPosition, extrudedPosition64xyLow, offset, position_worldspace);\\n\\n  float lightWeight = 1.0;\\n\\n  if (extruded > 0.5) {\\n    lightWeight = lighting_getLightWeight(\\n      position_worldspace.xyz, // the w component is always 1.0\\n      normals\\n    );\\n  }\\n\\n  vec3 lightWeightedColor = lightWeight * instanceColors.rgb;\\n  vec4 color = vec4(lightWeightedColor, instanceColors.a * opacity) / 255.0;\\n  vColor = color;\\n\\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\\n  picking_setPickingColor(instancePickingColors);\\n}\\n\";\nexports.default = _default;","map":{"mappings":[{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":3,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":7,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":10,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":13,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":17,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":18,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":19,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":21,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js","name":null,"original":{"line":23,"column":0},"generated":{"line":27,"column":15}}],"sources":{"../../../src/grid-cell-layer/grid-cell-layer-vertex.glsl.js":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Inspired by screen-grid-layer vertex shader in deck.gl\n\nexport default `\\\n#define SHADER_NAME grid-cell-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 normals;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceElevations;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\n// Custom uniforms\nuniform float extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\n\n// A magic number to scale elevation so that 1 unit approximate to 1 meter\n#define ELEVATION_SCALE 0.8\n\n// Result\nvarying vec4 vColor;\n\nvoid main(void) {\n\n  // if ahpha == 0.0 or z < 0.0, do not render element\n  float noRender = float(instanceColors.a == 0.0 || instanceElevations < 0.0);\n  float finalCellSize = project_scale(cellSize) * mix(1.0, 0.0, noRender);\n\n  float elevation = 0.0;\n\n  if (extruded > 0.5) {\n    elevation = instanceElevations  * (positions.z + 1.0) *\n      ELEVATION_SCALE * elevationScale;\n  }\n\n  // cube geometry vertics are between -1 to 1, scale and transform it to between 0, 1\n  vec3 extrudedPosition = vec3(instancePositions.xy, elevation);\n  vec2 extrudedPosition64xyLow = instancePositions64xyLow;\n  vec3 offset = vec3(\n    (positions.x * coverage + 1.0) / 2.0 * finalCellSize,\n    (positions.y * coverage - 1.0) / 2.0 * finalCellSize,\n    1.0);\n\n  // extrude positions\n  vec4 position_worldspace;\n  gl_Position = project_position_to_clipspace(extrudedPosition, extrudedPosition64xyLow, offset, position_worldspace);\n\n  float lightWeight = 1.0;\n\n  if (extruded > 0.5) {\n    lightWeight = lighting_getLightWeight(\n      position_worldspace.xyz, // the w component is always 1.0\n      normals\n    );\n  }\n\n  vec3 lightWeightedColor = lightWeight * instanceColors.rgb;\n  vec4 color = vec4(lightWeightedColor, instanceColors.a * opacity) / 255.0;\n  vColor = color;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n`;\n"},"lineCount":null}},"hash":"39a17d382323f7715e9aefcad48a97e2","cacheData":{"env":{}}}
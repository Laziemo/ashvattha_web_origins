{"id":"../node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js.map","includedInParent":true,"mtime":1550794323000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/core/package.json","includedInParent":true,"mtime":1550874675876},{"name":"./constants","loc":{"line":20,"column":42},"parent":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js","resolved":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/core/dist/esm/shaderlib/project/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// We are generating these from the js code in constants.js\nvar COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(_constants.PROJECT_COORDINATE_SYSTEM).map(function (key) {\n  return \"const float COORDINATE_SYSTEM_\".concat(key, \" = \").concat(_constants.PROJECT_COORDINATE_SYSTEM[key], \".;\");\n}).join('');\n\nvar _default = \"\".concat(COORDINATE_SYSTEM_GLSL_CONSTANTS, \"\\n\\nuniform float project_uCoordinateSystem;\\nuniform float project_uScale;\\nuniform bool project_uWrapLongitude;\\nuniform float project_uAntimeridian;\\nuniform vec3 project_uPixelsPerMeter;\\nuniform vec3 project_uPixelsPerDegree;\\nuniform vec3 project_uPixelsPerUnit;\\nuniform vec3 project_uPixelsPerUnit2;\\nuniform vec4 project_uCenter;\\nuniform mat4 project_uModelMatrix;\\nuniform mat4 project_uViewProjectionMatrix;\\nuniform vec2 project_uViewportSize;\\nuniform float project_uDevicePixelRatio;\\nuniform float project_uFocalDistance;\\nuniform vec3 project_uCameraPosition;\\nuniform vec2 project_coordinate_origin;\\n\\nconst float TILE_SIZE = 512.0;\\nconst float PI = 3.1415926536;\\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\\nconst vec2 ZERO_64_XY_LOW = vec2(0.0, 0.0);\\n\\n//\\n// Scaling offsets - scales meters to \\\"pixels\\\"\\n// Note the scalar version of project_scale is for scaling the z component only\\n//\\nfloat project_scale(float meters) {\\n  return meters * project_uPixelsPerMeter.z;\\n}\\n\\nvec2 project_scale(vec2 meters) {\\n  return meters * project_uPixelsPerMeter.xy;\\n}\\n\\nvec3 project_scale(vec3 meters) {\\n  return meters * project_uPixelsPerMeter;\\n}\\n\\nvec4 project_scale(vec4 meters) {\\n  return vec4(meters.xyz * project_uPixelsPerMeter, meters.w);\\n}\\n\\n//\\n// Projecting normal - transform deltas from current coordinate system to\\n// normals in the worldspace\\n//\\nvec3 project_normal(vec3 vector) {\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\\n    return normalize(vector * project_uPixelsPerDegree);\\n  }\\n  // Apply model matrix\\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\\n  return normalize(normal_modelspace.xyz * project_uPixelsPerMeter);\\n}\\n\\nvec4 project_offset_(vec4 offset) {\\n  float dy = offset.y;\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\\n    dy = clamp(dy, -1., 1.);\\n  }\\n  vec3 pixelsPerUnit = project_uPixelsPerUnit + project_uPixelsPerUnit2 * dy;\\n  return vec4(offset.xyz * pixelsPerUnit, offset.w);\\n}\\n\\n//\\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\\n//\\nvec2 project_mercator_(vec2 lnglat) {\\n  float x = lnglat.x;\\n  if (project_uWrapLongitude) {\\n    x = mod(x - project_uAntimeridian, 360.0) + project_uAntimeridian;\\n  }\\n  return vec2(\\n    radians(x) + PI,\\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\\n  );\\n}\\n\\n//\\n// Projects lnglats (or meter offsets, depending on mode) to pixels\\n//\\nvec4 project_position(vec4 position, vec2 position64xyLow) {\\n  // TODO - why not simply subtract center and fall through?\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT) {\\n    return project_uModelMatrix * vec4(\\n      project_mercator_(position.xy) * WORLD_SCALE * project_uScale,\\n      project_scale(position.z),\\n      position.w\\n    );\\n  }\\n\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\\n    // Subtract high part of 64 bit value. Convert remainder to float32, preserving precision.\\n    float X = position.x - project_coordinate_origin.x;\\n    float Y = position.y - project_coordinate_origin.y;\\n    return project_offset_(vec4(X + position64xyLow.x, Y + position64xyLow.y, position.z, position.w));\\n  }\\n\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\\n    return project_offset_(position);\\n  }\\n\\n  // METER_OFFSETS or IDENTITY\\n  // Apply model matrix\\n  vec4 position_modelspace = project_uModelMatrix * position;\\n  return project_offset_(position_modelspace);\\n}\\n\\nvec4 project_position(vec4 position) {\\n  return project_position(position, ZERO_64_XY_LOW);\\n}\\n\\nvec3 project_position(vec3 position, vec2 position64xyLow) {\\n  vec4 projected_position = project_position(vec4(position, 1.0), position64xyLow);\\n  return projected_position.xyz;\\n}\\n\\nvec3 project_position(vec3 position) {\\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_XY_LOW);\\n  return projected_position.xyz;\\n}\\n\\nvec2 project_position(vec2 position) {\\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_XY_LOW);\\n  return projected_position.xy;\\n}\\n\\n//\\n// Projects from \\\"world\\\" coordinates to clip space.\\n// Uses project_uViewProjectionMatrix\\n//\\nvec4 project_to_clipspace(vec4 position) {\\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_METER_OFFSETS ||\\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\\n    // Needs to be divided with project_uPixelsPerMeter\\n    position.w *= project_uPixelsPerMeter.z;\\n  }\\n  return project_uViewProjectionMatrix * position + project_uCenter;\\n}\\n\\n// Returns a clip space offset that corresponds to a given number of **non-device** pixels\\nvec4 project_pixel_to_clipspace(vec2 pixels) {\\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\\n  return vec4(offset * project_uFocalDistance, 0.0, 0.0);\\n}\\n\");\n\nexports.default = _default;","map":{"mappings":[{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":2,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":3,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":4,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":7,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":8,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":9,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":10,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":11,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":12,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":13,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":14,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":15,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":16,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":17,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":18,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":19,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":23,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":24,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"COORDINATE_SYSTEM_GLSL_CONSTANTS","original":{"line":24,"column":6},"generated":{"line":30,"column":4}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":24,"column":38},"generated":{"line":30,"column":36}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":30,"column":39}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":24,"column":47},"generated":{"line":30,"column":45}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"keys","original":{"line":24,"column":48},"generated":{"line":30,"column":46}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":30,"column":50}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"PROJECT_COORDINATE_SYSTEM","original":{"line":24,"column":53},"generated":{"line":30,"column":51}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":30,"column":87}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"map","original":{"line":25,"column":3},"generated":{"line":30,"column":89}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":30,"column":92}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":7},"generated":{"line":30,"column":93}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"key","original":{"line":25,"column":7},"generated":{"line":30,"column":103}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":7},"generated":{"line":30,"column":106}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":30,"column":108}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":9}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":42}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":48}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"key","original":{"line":25,"column":47},"generated":{"line":31,"column":49}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":52}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":54}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":59}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":61}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":67}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"PROJECT_COORDINATE_SYSTEM","original":{"line":25,"column":56},"generated":{"line":31,"column":68}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"key","original":{"line":25,"column":82},"generated":{"line":31,"column":105}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"PROJECT_COORDINATE_SYSTEM","original":{"line":25,"column":56},"generated":{"line":31,"column":108}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":109}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":111}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":115}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":25,"column":10},"generated":{"line":31,"column":116}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":24,"column":41},"generated":{"line":32,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":32,"column":1}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"join","original":{"line":26,"column":3},"generated":{"line":32,"column":3}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":32,"column":7}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":26,"column":8},"generated":{"line":32,"column":8}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"Object","original":{"line":24,"column":41},"generated":{"line":32,"column":10}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":24,"column":0},"generated":{"line":32,"column":11}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":15}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":18}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":24}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":"COORDINATE_SYSTEM_GLSL_CONSTANTS","original":{"line":29,"column":2},"generated":{"line":34,"column":25}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":57}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":59}},{"source":"../../../../src/shaderlib/project/project.glsl.js","name":null,"original":{"line":28,"column":0},"generated":{"line":34,"column":5048}}],"sources":{"../../../../src/shaderlib/project/project.glsl.js":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PROJECT_COORDINATE_SYSTEM} from './constants';\n\n// We are generating these from the js code in constants.js\nconst COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(PROJECT_COORDINATE_SYSTEM)\n  .map(key => `const float COORDINATE_SYSTEM_${key} = ${PROJECT_COORDINATE_SYSTEM[key]}.;`)\n  .join('');\n\nexport default `\\\n${COORDINATE_SYSTEM_GLSL_CONSTANTS}\n\nuniform float project_uCoordinateSystem;\nuniform float project_uScale;\nuniform bool project_uWrapLongitude;\nuniform float project_uAntimeridian;\nuniform vec3 project_uPixelsPerMeter;\nuniform vec3 project_uPixelsPerDegree;\nuniform vec3 project_uPixelsPerUnit;\nuniform vec3 project_uPixelsPerUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\nuniform vec2 project_coordinate_origin;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\nconst vec2 ZERO_64_XY_LOW = vec2(0.0, 0.0);\n\n//\n// Scaling offsets - scales meters to \"pixels\"\n// Note the scalar version of project_scale is for scaling the z component only\n//\nfloat project_scale(float meters) {\n  return meters * project_uPixelsPerMeter.z;\n}\n\nvec2 project_scale(vec2 meters) {\n  return meters * project_uPixelsPerMeter.xy;\n}\n\nvec3 project_scale(vec3 meters) {\n  return meters * project_uPixelsPerMeter;\n}\n\nvec4 project_scale(vec4 meters) {\n  return vec4(meters.xyz * project_uPixelsPerMeter, meters.w);\n}\n\n//\n// Projecting normal - transform deltas from current coordinate system to\n// normals in the worldspace\n//\nvec3 project_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return normalize(vector * project_uPixelsPerDegree);\n  }\n  // Apply model matrix\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\n  return normalize(normal_modelspace.xyz * project_uPixelsPerMeter);\n}\n\nvec4 project_offset_(vec4 offset) {\n  float dy = offset.y;\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    dy = clamp(dy, -1., 1.);\n  }\n  vec3 pixelsPerUnit = project_uPixelsPerUnit + project_uPixelsPerUnit2 * dy;\n  return vec4(offset.xyz * pixelsPerUnit, offset.w);\n}\n\n//\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\n//\nvec2 project_mercator_(vec2 lnglat) {\n  float x = lnglat.x;\n  if (project_uWrapLongitude) {\n    x = mod(x - project_uAntimeridian, 360.0) + project_uAntimeridian;\n  }\n  return vec2(\n    radians(x) + PI,\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\n  );\n}\n\n//\n// Projects lnglats (or meter offsets, depending on mode) to pixels\n//\nvec4 project_position(vec4 position, vec2 position64xyLow) {\n  // TODO - why not simply subtract center and fall through?\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT) {\n    return project_uModelMatrix * vec4(\n      project_mercator_(position.xy) * WORLD_SCALE * project_uScale,\n      project_scale(position.z),\n      position.w\n    );\n  }\n\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    // Subtract high part of 64 bit value. Convert remainder to float32, preserving precision.\n    float X = position.x - project_coordinate_origin.x;\n    float Y = position.y - project_coordinate_origin.y;\n    return project_offset_(vec4(X + position64xyLow.x, Y + position64xyLow.y, position.z, position.w));\n  }\n\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return project_offset_(position);\n  }\n\n  // METER_OFFSETS or IDENTITY\n  // Apply model matrix\n  vec4 position_modelspace = project_uModelMatrix * position;\n  return project_offset_(position_modelspace);\n}\n\nvec4 project_position(vec4 position) {\n  return project_position(position, ZERO_64_XY_LOW);\n}\n\nvec3 project_position(vec3 position, vec2 position64xyLow) {\n  vec4 projected_position = project_position(vec4(position, 1.0), position64xyLow);\n  return projected_position.xyz;\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_XY_LOW);\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_XY_LOW);\n  return projected_position.xy;\n}\n\n//\n// Projects from \"world\" coordinates to clip space.\n// Uses project_uViewProjectionMatrix\n//\nvec4 project_to_clipspace(vec4 position) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_METER_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    // Needs to be divided with project_uPixelsPerMeter\n    position.w *= project_uPixelsPerMeter.z;\n  }\n  return project_uViewProjectionMatrix * position + project_uCenter;\n}\n\n// Returns a clip space offset that corresponds to a given number of **non-device** pixels\nvec4 project_pixel_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\n  return vec4(offset * project_uFocalDistance, 0.0, 0.0);\n}\n`;\n"},"lineCount":null}},"hash":"aea581eec61be35e5644ad3190f682b2","cacheData":{"env":{}}}
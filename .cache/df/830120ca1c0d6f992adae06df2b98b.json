{"id":"../node_modules/luma.gl/dist/esm/shadertools/src/modules/transform/transform.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/luma.gl/dist/esm/shadertools/src/modules/transform/transform.js.map","includedInParent":true,"mtime":1550269665000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/luma.gl/package.json","includedInParent":true,"mtime":1550874675876}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Private shader module used by `Transform`\nvar vs = \"attribute float transform_elementID;\\nvec2 transform_getPixelSizeHalf(vec2 size) {\\n  return vec2(1.) / (2. * size);\\n}\\n\\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\\n  return vec2(xIndex, yIndex);\\n}\\nvec2 transform_getTexCoord(vec2 size) {\\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\\n  vec2 coord = indices / size + pixelSizeHalf;\\n  return coord;\\n}\\nvec2 transform_getPos(vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\\n  return pos;\\n}\\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec4 textureColor = texture2D(texSampler, texCoord);\\n  return textureColor;\\n}\\n\";\nvar _default = {\n  name: 'transform',\n  vs: vs,\n  fs: null\n};\nexports.default = _default;","map":{"mappings":[{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"vs","original":{"line":3,"column":6},"generated":{"line":8,"column":4}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":3,"column":8},"generated":{"line":8,"column":6}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":3,"column":8},"generated":{"line":8,"column":9}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":956}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":44,"column":15},"generated":{"line":9,"column":15}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"name","original":{"line":45,"column":2},"generated":{"line":10,"column":0}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"name","original":{"line":45,"column":2},"generated":{"line":10,"column":2}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":45,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":45,"column":8},"generated":{"line":10,"column":8}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":44,"column":15},"generated":{"line":10,"column":19}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"vs","original":{"line":46,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"vs","original":{"line":46,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":46,"column":4},"generated":{"line":11,"column":4}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"vs","original":{"line":46,"column":2},"generated":{"line":11,"column":6}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":44,"column":15},"generated":{"line":11,"column":8}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"fs","original":{"line":47,"column":2},"generated":{"line":12,"column":0}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":"fs","original":{"line":47,"column":2},"generated":{"line":12,"column":2}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":47,"column":4},"generated":{"line":12,"column":4}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":47,"column":6},"generated":{"line":12,"column":6}},{"source":"../../../../../../src/shadertools/src/modules/transform/transform.js","name":null,"original":{"line":44,"column":15},"generated":{"line":13,"column":0}}],"sources":{"../../../../../../src/shadertools/src/modules/transform/transform.js":"// Private shader module used by `Transform`\n\nconst vs = `\\\nattribute float transform_elementID;\n\n// returns half of pixel size, used to move the pixel position to center of the pixel.\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\n// returns current elements pixel indeces [x, y],\n// where x ranges in [0 to texSize-1] and y ranges in [0 to texSize-1]\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  // Add safe offset (half of pixel height) before doing floor\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\n\n// returns current elementID's texture co-ordianate\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\n\n// returns current elementID's position\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  // Change from [0 1] range to [-1 1]\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\n\n// returns current elementID's pixel value\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n`;\n\nexport default {\n  name: 'transform',\n  vs,\n  fs: null\n};\n"},"lineCount":null}},"hash":"a75c813371c9f45dc1bf6fd0f3309a76","cacheData":{"env":{}}}
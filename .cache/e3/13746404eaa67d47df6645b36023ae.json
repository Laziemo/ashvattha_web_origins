{"id":"../node_modules/@deck.gl/layers/dist/esm/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","dependencies":[{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/dist/esm/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js.map","includedInParent":true,"mtime":1550794262000},{"name":"/home/lm0-chan/react-play/gita_labs/package.json","includedInParent":true,"mtime":1550874673728},{"name":"/home/lm0-chan/react-play/gita_labs/.babelrc","includedInParent":true,"mtime":1550824957232},{"name":"/home/lm0-chan/react-play/gita_labs/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1550874675876}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar _default = \"#define SHADER_NAME screen-grid-layer-vertex-shader-webgl1\\n#define RANGE_COUNT 6\\n\\nattribute vec3 vertices;\\nattribute vec3 instancePositions;\\nattribute vec4 instanceCounts;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform vec3 cellScale;\\nuniform vec4 minColor;\\nuniform vec4 maxColor;\\nuniform float maxWeight;\\nuniform vec4 colorRange[RANGE_COUNT];\\nuniform vec2 colorDomain;\\nuniform bool shouldUseMinMax;\\n\\nvarying vec4 vColor;\\nvarying float vSampleCount;\\n\\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\\n  vec4 outColor = vec4(0., 0., 0., 0.);\\n  if (value >= domain.x && value <= domain.y) {\\n    float domainRange = domain.y - domain.x;\\n    if (domainRange <= 0.) {\\n      outColor = colorRange[0];\\n    } else {\\n      float rangeCount = float(RANGE_COUNT);\\n      float rangeStep = domainRange / rangeCount;\\n      float idx = floor((value - domain.x) / rangeStep);\\n      idx = clamp(idx, 0., rangeCount - 1.);\\n      int intIdx = int(idx);\\n      outColor = colorRange[intIdx];\\n    }\\n  }\\n  outColor = outColor / 255.;\\n  return outColor;\\n}\\n\\nvoid main(void) {\\n  vSampleCount = instanceCounts.a;\\n\\n  float weight = instanceCounts.r;\\n  float step = weight / maxWeight;\\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\\n\\n  vec2 domain = colorDomain;\\n  float domainMaxValid = float(colorDomain.y != 0.);\\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\\n\\n  float rangeMinMax = float(shouldUseMinMax);\\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\\n  vColor = vec4(color.rgb, color.a * opacity);\\n\\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\\n  picking_setPickingColor(instancePickingColors);\\n\\n  gl_Position = vec4(instancePositions + vertices * cellScale, 1.);\\n}\\n\";\nexports.default = _default;","map":{"mappings":[{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":3,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":7,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":10,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":13,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":17,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":18,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":19,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js","name":null,"original":{"line":21,"column":0},"generated":{"line":26,"column":15}}],"sources":{"../../../src/screen-grid-layer/screen-grid-layer-vertex-webgl1.glsl.js":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME screen-grid-layer-vertex-shader-webgl1\n#define RANGE_COUNT 6\n\nattribute vec3 vertices;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform float maxWeight;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + vertices * cellScale, 1.);\n}\n`;\n"},"lineCount":null}},"hash":"b89b1d4e321bee3d3a6cf785539db23d","cacheData":{"env":{}}}